;; Basic immutable list implementation and operations
;; Source: http://pages.cs.wisc.edu/~horwitz/CS704-NOTES/2.LAMBDA-CALCULUS-PART2.html#rec,
;;         https://en.wikipedia.org/wiki/Church_encoding#Church_pairs,
;;         https://jwodder.freeshell.org/lambda.html

LIST    := λh.λt.λs.(s h t)
NIL     := λa.λx.λy.x

HEAD    := λl.l (λh.λt.h)
TAIL    := λl.l (λh.λt.t)

ISNIL   := λl.l λh.λt.λx.λy.y

LEN     := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λc.λx. ISNIL x c (g ((λn.λf.λx.f (n f x)) c) (TAIL x))) 0
GET     := λx.λi.HEAD (i TAIL x)
REVERSE := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λa.λl. ISNIL l a (g (LIST (HEAD l) a) (TAIL l))) NIL
CONCAT  := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λa.λb. ISNIL a b (LIST (HEAD a) (g (TAIL a) b)))

APPLY   := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λf.λx. ISNIL x f (g (f (HEAD x)) (TAIL x)))
ELEMS   := λl.APPLY (λx.x) l

MAP     := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λf.λx. ISNIL x NIL (LIST (f (HEAD x)) (g f (TAIL x))))
FILTER  := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λf.λx. ISNIL x NIL (f (HEAD x) (LIST (HEAD x)) I (g f (TAIL x))))

LFOLD   := (λf.(λx.f (x x)) (λx.f (x x))) (λg.λf.λe.λx. ISNIL x e (g f (f e (HEAD x)) (TAIL x)))
RFOLD   := λf.λe.λx. (λf.(λx.f (x x)) (λx.f (x x))) (λg.λy. ISNIL y e (f (HEAD y) (g (TAIL y)))) x
CROSS   := λf.λl.λm. LFOLD CONCAT NIL (MAP (λx. MAP (f x) m) l)
